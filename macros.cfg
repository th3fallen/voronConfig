# Conditional G28
[gcode_macro CG28]
gcode:
  {% if printer.toolhead.homed_axes != "xyz" %}
    G28
  {% endif %}

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    G28
    QUAD_GANTRY_LEVEL
    G28

[gcode_macro PRINT_START]
gcode:
    {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(0)|float %}
    G28; Home All    
    {% if printer["gcode_macro ERCF_HOME"].home == -1 %}
      ;ERCF_HOME
    {% endif %}
    M117 Heating...
    SET_HEATER_TEMPERATURE HEATER=chamber TARGET={CHAMBER_TEMP}
    M140 S{params.BED_TEMP}; set bed final temp
    M190 S{params.BED_TEMP}; ;wait for bed final temp
    #TEMPERATURE_WAIT SENSOR=chamber MINIMUM={CHAMBER_TEMP}
    M109 S{params.EXTRUDER_TEMP}  ;wait for extruder final temp

    G1 Z30 X150 Y150

    M140 S{params.BED_TEMP} ; set bed final temp
    M104 S{params.EXTRUDER_TEMP} ; set extruder final temp
    M190 S{params.BED_TEMP} ; wait for bed final temp
    M104 S{params.EXTRUDER_TEMP}  ; set extruder preheat
    M109 S{params.EXTRUDER_TEMP} ; wait for extruder final temp

    M117 QGL
    QUAD_GANTRY_LEVEL CALIBRATE=false
    G28 Z
    BED_MESH_CALIBRATE

    G92 E0        ; reset extruder
    
    CLEAN_NOZZLE
    CALIBRATE_Z
    
    ;BED_MESH_PROFILE LOAD=default
   ; BED_MESH_TEMP TEMP={BED_TEMP}
   ; BED_MESH_LOAD_TEMP TEMP={BED_TEMP}
    ;PURGE_LINE
    ;TEMPADJUSTOFFSET
    G1 Z3 F3000         ; move z up little to prevent scratching of surface
    M117 Printing...
    G0 E10 F3600         ; Extrude to prime nozzle

[gcode_macro PRINT_END]
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                ; retract filament
    G91                            ; relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G1 Z2 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    G0 X125 Y250 F3600             ; park nozzle at rear
    BED_MESH_CLEAR
    M117

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    {% set X = params.X|default(230) %}
    {% set Y = params.Y|default(230) %}
    {% set Z = params.Z|default(10) %}
    {% set E = params.E|default(1) %}
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    {% if printer.extruder.temperature > 180 %}
      G1 E-{E} F2100
    {% endif %} 
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F6000

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    {% set E = params.E|default(1) %}
    G91
    G1 E{E} F2100
    G90
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    BASE_RESUME

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT
    
[gcode_macro LED_OFF]
gcode: 
  SET_PIN PIN=caselight VALUE=0


[gcode_macro LED_ON]
gcode: 
  SET_PIN PIN=caselight VALUE=1

[gcode_macro M600]
gcode:
    {% set X = params.X|default(250) %}
    {% set Y = params.Y|default(10) %}
    {% set Z = params.Z|default(20) %}    
    M117 Filament runout detected
    RUN_SHELL_COMMAND CMD=m600_telegram
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE X={X} Y={Y}
    RESTORE_GCODE_STATE NAME=M600_state    

[gcode_macro PURGE_LINE]
#   A purge line on the left of the bed to prime the extruder
gcode:
    G92 E0                         ; zero/reset extruder
    G1 X2.2 Y20 Z0.3 F18000        ; move to start position
    G1 E+15 F150              ;    extrude to put the pressure (-20 from purge macro)
    G92 E0

    G1 X2.2 Y200 Z0.25 F1500 E10    ; extrude the first line
    G1 X2.5 Y200 Z0.3 F18000       ; move to side a little
    G1 X2.5 Y20 Z0.25 F1500.0 E20   ; extrude the second line
    G92 E0                         ; zero/reset extruder
    G1 Z2.0 E-0.1 F3000              ; move nozzle up and retract tiny bit
    G92 E0 
    
#   Nozzle Clean Macro
#       Brush wipe range at 55,300 through 100,300
#       Contact at Z3.5
[gcode_macro CLEAN_NOZZLE]
variable_z_contact_height: 5.4
variable_number_of_wipes: 5
gcode:
    SAVE_GCODE_STATE NAME=BEFORE_CLEAN
    G90
    {% if "z" not in printer.toolhead.homed_axes %}
        G28                     ; Only G28 Home if needed
    {% endif %}
    G1 X270 Y300 F9000           ; move to nozzle brush
    G1 Z10 F3000                ; lift nozzle
    {% if printer.extruder.temperature < 190 and printer.extruder.target > 190 %}
        M109 S{printer.extruder.target} ; wait for previous M104
    {% elif printer.extruder.temperature < 190 %}
        M109 S190               ; Wait for min E temp
    {% endif %}
    M83                         ; set extruder to relative
#    G0 E10.8 F300         ; extrude 10mm to prime to soften tip
    G1 E-4 F300                 ; retract filament 4mm
    G1 Z{z_contact_height} F3000               ; move nozzle into brush
    {% for wipe in range(number_of_wipes) %} ; wipe nozzle across brush
        {% for coordinate in [(190,300),(270,300)] %}
            G1 X{coordinate[0]} Y{coordinate[1]} F9000
        {% endfor %}
    {% endfor %}
    G1 Z30 F3000                ; lift z 30mm
    RESTORE_GCODE_STATE NAME=BEFORE_CLEAN

   #   GET_BED_MESH
[gcode_macro get_bed_mesh]
gcode:
    BED_MESH_CLEAR                  ; Clear bed mesh data
    BED_MESH_PROFILE REMOVE=hot     ; Remove saved mesh
    G32                             ; Auto Adjust
    BED_MESH_CALIBRATE              ; Run Bed Mesh
    BED_MESH_PROFILE SAVE=hot       ; Save Bed Mesh
    SAVE_CONFIG

#Wait for chamber temp
[gcode_macro M191]
gcode:
  {% set S = params.S|default(0) %}
  TEMPERATURE_WAIT SENSOR="heater_generic chamber" MINIMUM={S}

#   Set chamber temp (OctoPrint)
[gcode_macro M141]
gcode:
  {% set S = params.S|default(0) %}
  SET_TEMPERATURE_FAN_TARGET temperature_fan=chamber target={S}

# Park bed for heatsoaking
[gcode_macro PARK]
gcode:
  {% set FORCE = params.FORCE|default(0) %}
  {% if printer.idle_timeout.state != "Printing" or FORCE|int == 1 %}
    CG28                           ; Home if not already homed
    SAVE_GCODE_STATE NAME=PARK
    G90                            ; absolute positioning
    G0 X150 Y150 Z30 F5000        ; Move to position
    RESTORE_GCODE_STATE NAME=PARK
  {% else %}
    { action_respond_info("PARK disabled while printing!") }
  {% endif %}

# Park front for maintenance / cleaning
[gcode_macro PARKFRONT]
gcode:
  {% if printer.idle_timeout.state != "Printing" %}
    CG28                           ; Home if not already homed
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                            ; absolute coords
    G1 Z100 X130 Y10 F5000         ; Move to position
    RESTORE_GCODE_STATE NAME=PARKFRONT
  {% else %}
    { action_respond_info("PARKFRONT disabled while printing!") }
  {% endif %}

  # Park front for maintenance / cleaning
[gcode_macro PARKBUCKET]
gcode:
  CG28                           ; Home if not already homed
  SAVE_GCODE_STATE NAME=PARKBUCKET
  G90                            ; absolute coords
  G1 X270 Y300 F5000         ; Move to position
  RESTORE_GCODE_STATE NAME=PARKBUCKET
  
[gcode_macro LOAD]
gcode:
    SAVE_GCODE_STATE NAME=LOAD
    G91
    G1 E82 F900                              ;Load filament
    CLEAN_NOZZLE
    RESTORE_GCODE_STATE NAME=LOAD
    SET_IDLE_TIMEOUT TIMEOUT=7200

[gcode_macro PURGE]
gcode:
    G28
    SAVE_GCODE_STATE NAME=PURGE
    ;M104 S245 ; set extruder final temp
    M109 S245  ;wait for extruder final temp
    PARKBUCKET
    G1 E75 F300
    TURN_OFF_HEATERS
    CLEAN_NOZZLE
    G28 Z
    RESTORE_GCODE_STATE NAME=PURGE

[gcode_macro M73]
#   store progress % and remaining time as variables
rename_existing: M733
variable_p: 0.0
variable_r: 0.0
gcode:
  {% set P = params.P|default(0.0) %}
  {% set R = params.R|default(0.0) %}
  SET_GCODE_VARIABLE MACRO=M73 VARIABLE=p VALUE={P}
  SET_GCODE_VARIABLE MACRO=M73 VARIABLE=r VALUE={R}
  
[gcode_macro DUMP_PARAMETERS]
gcode:
  {% set parameters = namespace(output = '') %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% set donotwant = ['configfile', 'bed_mesh'] %}
      {% if name1 is not in donotwant %}
        {% set param = "printer['%s'].%s = %s" % (name1, name2, printer[name1][name2]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
      {% endif %}
      {% else %}
        {% set param = "printer['%s'] = %s" % (name1, printer[name1]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
    {% endfor %}
  {% endfor %}
  { action_respond_info(parameters.output) }

[gcode_macro TEMPADJUSTOFFSET]
gcode:
    #ABS
    {% if printer.heater_bed.target >= 100 %}
    {% endif %}
    #PETG
    {% if printer.heater_bed.target > 65 and printer.heater_bed.target < 100 %}
        SET_GCODE_OFFSET Z=0 MOVE=1
        SET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=1
    {% endif %}
    #PLA
    {% if printer.heater_bed.target <= 65 %}
        SET_GCODE_OFFSET Z=0 MOVE=1
        SET_GCODE_OFFSET Z_ADJUST=0.03 MOVE=1
    {% endif %}

[gcode_macro BEEP]
gcode:
    {% set I = params.I|default(1) %}
    {% set MS = params.MS|default(100) %}
    {% for beep in range(I|int) %}
        SET_PIN PIN=BEEPER_pin VALUE=1
        G4 P{MS}
        SET_PIN PIN=BEEPER_pin VALUE=0
    {% endfor %}
    
[gcode_macro M300]
gcode:
    {% set S = params.S|default(440) %}
    #   Use a default LA-440Hz tone if S is omitted.
    {% set P = params.P|default(100) %}
    #   Use a 100ms duration is P is omitted.
    SET_PIN PIN=BEEPER_pin VALUE=0.5 CYCLE_TIME={1/S|float}
    G4 P{P}
    SET_PIN PIN=BEEPER_pin VALUE=0
    
[gcode_macro BED_MESH_TEMP]
gcode:
    {% set TEMP = params.TEMP|default(0) %}
    {% set FORCE = params.FORCE|default(0) %}
    {% if TEMP|int < 30 %}
        {action_respond_info("TEMP is a required parameter!")}
    {% else %}
        {% if printer.configfile.config["bed_mesh temp_" + TEMP] is not defined or FORCE|int == 1 %}
            M190 S{TEMP}           ; wait for bed temp
            ; Run QGL/home at new temp, both to validate we're still leveled at the new
            ; temp, but also to give the temp a bit to soak.
            G32
            BED_MESH_CLEAR
            BED_MESH_CALIBRATE
            BED_MESH_PROFILE SAVE=temp_{TEMP}
            SAVE_CONFIG
        {% endif %}
    {% endif %}

[gcode_macro BED_MESH_LOAD_TEMP]
gcode:
    {% set TEMP = params.TEMP|default(0) %}
    {% set FORCE = params.FORCE|default(0) %}
    BED_MESH_TEMP TEMP={TEMP} FORCE={FORCE}
    BED_MESH_PROFILE LOAD=temp_{TEMP}

[gcode_shell_command m600_telegram]
command: sh /home/pi/moonraker-telegram/scripts/telegram.sh "Filament Runout Detected..."
timeout: 2.
verbose: false

[gcode_shell_command backup_config]
command: sh /home/pi/backup.sh
timeout: 30.
verbose: True

[gcode_macro BACKUP_CONFIG]
gcode:
    RUN_SHELL_COMMAND CMD=backup_config

[gcode_macro FUME_FAN_ON]
gcode:
    SET_FAN_SPEED FAN=filter_fan SPEED=0.75

[gcode_macro FUME_FAN_OFF]
gcode:
    SET_FAN_SPEED FAN=filter_fan SPEED=0

[delayed_gcode delayed_fume_fan_off]
initial_duration: 0.
gcode:
  {% if printer.idle_timeout.state == "Idle" %}
    FUME_FAN_OFF
  {% endif %}
